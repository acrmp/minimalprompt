// Code generated by counterfeiter. DO NOT EDIT.
package agentfakes

import (
	"context"
	"sync"

	"github.com/acrmp/minimalprompt/agent"
	"github.com/tmc/langchaingo/llms"
)

type FakeModel struct {
	GenerateContentStub        func(context.Context, []llms.MessageContent, ...llms.CallOption) (*llms.ContentResponse, error)
	generateContentMutex       sync.RWMutex
	generateContentArgsForCall []struct {
		arg1 context.Context
		arg2 []llms.MessageContent
		arg3 []llms.CallOption
	}
	generateContentReturns struct {
		result1 *llms.ContentResponse
		result2 error
	}
	generateContentReturnsOnCall map[int]struct {
		result1 *llms.ContentResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeModel) GenerateContent(arg1 context.Context, arg2 []llms.MessageContent, arg3 ...llms.CallOption) (*llms.ContentResponse, error) {
	var arg2Copy []llms.MessageContent
	if arg2 != nil {
		arg2Copy = make([]llms.MessageContent, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.generateContentMutex.Lock()
	ret, specificReturn := fake.generateContentReturnsOnCall[len(fake.generateContentArgsForCall)]
	fake.generateContentArgsForCall = append(fake.generateContentArgsForCall, struct {
		arg1 context.Context
		arg2 []llms.MessageContent
		arg3 []llms.CallOption
	}{arg1, arg2Copy, arg3})
	stub := fake.GenerateContentStub
	fakeReturns := fake.generateContentReturns
	fake.recordInvocation("GenerateContent", []interface{}{arg1, arg2Copy, arg3})
	fake.generateContentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeModel) GenerateContentCallCount() int {
	fake.generateContentMutex.RLock()
	defer fake.generateContentMutex.RUnlock()
	return len(fake.generateContentArgsForCall)
}

func (fake *FakeModel) GenerateContentCalls(stub func(context.Context, []llms.MessageContent, ...llms.CallOption) (*llms.ContentResponse, error)) {
	fake.generateContentMutex.Lock()
	defer fake.generateContentMutex.Unlock()
	fake.GenerateContentStub = stub
}

func (fake *FakeModel) GenerateContentArgsForCall(i int) (context.Context, []llms.MessageContent, []llms.CallOption) {
	fake.generateContentMutex.RLock()
	defer fake.generateContentMutex.RUnlock()
	argsForCall := fake.generateContentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeModel) GenerateContentReturns(result1 *llms.ContentResponse, result2 error) {
	fake.generateContentMutex.Lock()
	defer fake.generateContentMutex.Unlock()
	fake.GenerateContentStub = nil
	fake.generateContentReturns = struct {
		result1 *llms.ContentResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeModel) GenerateContentReturnsOnCall(i int, result1 *llms.ContentResponse, result2 error) {
	fake.generateContentMutex.Lock()
	defer fake.generateContentMutex.Unlock()
	fake.GenerateContentStub = nil
	if fake.generateContentReturnsOnCall == nil {
		fake.generateContentReturnsOnCall = make(map[int]struct {
			result1 *llms.ContentResponse
			result2 error
		})
	}
	fake.generateContentReturnsOnCall[i] = struct {
		result1 *llms.ContentResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeModel) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateContentMutex.RLock()
	defer fake.generateContentMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeModel) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ agent.Model = new(FakeModel)
