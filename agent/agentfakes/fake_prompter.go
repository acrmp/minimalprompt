// Code generated by counterfeiter. DO NOT EDIT.
package agentfakes

import (
	"sync"

	"github.com/acrmp/minimalprompt/agent"
)

type FakePrompter struct {
	PromptStub        func(string) (string, error)
	promptMutex       sync.RWMutex
	promptArgsForCall []struct {
		arg1 string
	}
	promptReturns struct {
		result1 string
		result2 error
	}
	promptReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePrompter) Prompt(arg1 string) (string, error) {
	fake.promptMutex.Lock()
	ret, specificReturn := fake.promptReturnsOnCall[len(fake.promptArgsForCall)]
	fake.promptArgsForCall = append(fake.promptArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.PromptStub
	fakeReturns := fake.promptReturns
	fake.recordInvocation("Prompt", []interface{}{arg1})
	fake.promptMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePrompter) PromptCallCount() int {
	fake.promptMutex.RLock()
	defer fake.promptMutex.RUnlock()
	return len(fake.promptArgsForCall)
}

func (fake *FakePrompter) PromptCalls(stub func(string) (string, error)) {
	fake.promptMutex.Lock()
	defer fake.promptMutex.Unlock()
	fake.PromptStub = stub
}

func (fake *FakePrompter) PromptArgsForCall(i int) string {
	fake.promptMutex.RLock()
	defer fake.promptMutex.RUnlock()
	argsForCall := fake.promptArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePrompter) PromptReturns(result1 string, result2 error) {
	fake.promptMutex.Lock()
	defer fake.promptMutex.Unlock()
	fake.PromptStub = nil
	fake.promptReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePrompter) PromptReturnsOnCall(i int, result1 string, result2 error) {
	fake.promptMutex.Lock()
	defer fake.promptMutex.Unlock()
	fake.PromptStub = nil
	if fake.promptReturnsOnCall == nil {
		fake.promptReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.promptReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePrompter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.promptMutex.RLock()
	defer fake.promptMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePrompter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ agent.Prompter = new(FakePrompter)
